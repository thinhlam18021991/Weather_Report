plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'dagger.hilt.android.plugin'
}

apply plugin: "kotlin-kapt"

def keystorePropertiesFile = rootProject.file("keystore.properties")

def keystoreProperties = new Properties()

if (keystorePropertiesFile.canRead()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdk 32

    signingConfigs {
        if (keystoreProperties.containsKey('debugStoreFile')) {
            debugConfig {
                keyAlias keystoreProperties['debugKeyAlias']
                keyPassword keystoreProperties['debugKeyPassword']
                storeFile file(keystoreProperties['debugStoreFile'])
                storePassword keystoreProperties['debugStorePassword']
            }
        }

        if (keystoreProperties.containsKey('releaseStoreFile')) {
            releaseConfig {
                keyAlias keystoreProperties['releaseKeyAlias']
                keyPassword keystoreProperties['releaseKeyPassword']
                storeFile file(keystoreProperties['releaseStoreFile'])
                storePassword keystoreProperties['releaseStorePassword']
            }
        }
    }

    defaultConfig {
        applicationId "com.assignment.nab"
        minSdk libs.versions.minSdkVersion.get().toInteger()
        targetSdk libs.versions.targetSdkVersion.get().toInteger()
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {

        debug {
            testCoverageEnabled true
            debuggable true
            if (keystoreProperties.containsKey('debugStoreFile')) {
                signingConfig signingConfigs.debugConfig
            }
        }

        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (keystoreProperties.containsKey('releaseStoreFile')) {
                signingConfig signingConfigs.releaseConfig
            }
        }

    }

    flavorDimensions "default"

    productFlavors {
        dev {
            dimension "default"
            buildConfigField "String", "END_POINT", "\"https://api.openweathermap.org/data/2.5/\""
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }

    testOptions {
        unitTests.includeAndroidResources = true
    }

    lintOptions {
        baseline(file("lint-baseline.xml"))
    }
}

dependencies {
    implementation project(":security")
    implementation project(":shared")
    implementation project(":model")
    implementation project(":networkmodel")
    implementation project(":network")
    implementation project(":base")
    implementation project(":theme")
    implementation libs.corektx
    // appcompat
    implementation libs.appcompat
    // material
    implementation libs.googleMaterial
    // dagger hilt
    implementation libs.daggerHiltAndroid
    kapt libs.daggerHiltAndroidCompile

    // viewmodel
    implementation libs.lifecycleViewModel

    // live data
    implementation libs.lifecycleLiveData

    // fragment
    implementation libs.fragmentKtx


    // unit test
    testImplementation libs.junit
    testImplementation libs.mockito
    testImplementation libs.truth
    testImplementation libs.roboElectric

    // check root device
    implementation libs.rootBear
}